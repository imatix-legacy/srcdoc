SRCDOC - By Pieter Hintjens <ph@imatix.com>                       Version 1.41

NAME

    srcdoc - Generate HTML documentation from source files

SYNOPSIS

    perl srcdoc coversheet

DESCRIPTION

    Srcdoc processes a set of C source files to produce documentation in HTML
    format.  You provide a 'coversheet' file that specifies which source
    files to search.  Srcdoc produces output (a file called html.out) that is
    ready for feeding to the HTML preprocessor htmlpp.  You can fine-tune the
    output by playing with the format file (srcdoc.fmt).

    Srcdoc is not a C parser, so expects some help from the writer.  You must
    use certain modest conventions to tell srcdoc which parts of the source
    code are interesting as documentation.  The current version of srcdoc is
    happiest when looking at packages of functions.

    In general srcdoc assumes that:

        1.  A .h file defines prototypes for one or more .c files.
        2.  All public functions in a .c file have their prototypes in a
            single .h file.
        3.  One .h file corresponds to a section of documentation.
        4.  Each public function in a .c file corresponds to a HTML page
            within that section.

    The coversheet file is a plain ASCII file.  Lines starting with '#' are
    comments.  Blank lines are ignored if possible.  The coversheet contains
    a number of 'sections' that srcdoc looks for.  These are:

    <<files>>
        Specifies the list of source (.h and .c) files to parse.  Srcdoc
        parses these files in the order you list them, so you should arrange
        each .h file followed by the .c files it packages.  The order of .h
        files may be important - you should at least order them so that any
        .h files that use other ones come after them.  This is explained in
        the section 'post-processing' later on.
    <<header>>
        Specifies zero or more lines of htmlpp output that are placed at the
        start of the generated output.  Generally the header contains fairly
        standard htmlpp definitions and possibly an .include command for a
        larger block of descriptive text.

    The order of these blocks is not important.  You can use any case.  Place
    the <<...>> tag by itself on a line.

    This is an example of a coversheet file:

    #    Example of a coversheet file

    <<Files>>
    myfunct.h myfunct.c
    <<Header>>
    .------------------------------------------------------------
    .-  This is generated by srcdoc for input to htmlpp
    .------------------------------------------------------------
    .include prelude.def
    .page myfunct.htm=These Great Functions
    .ignore header
    <H1>$(TITLE)</H1>
    .ignore header
    <H2>Overview</H2>
    <P>These functions provide heuristic argument interpretation.  They
    will do more or less something useful, depending on the supplied
    arguments.</P>
    .ignore header
    <H2>Table of Contents</H2>
    .build toc


    Srcdoc handles .h and .c files differently.  This is how it parses a .h
    file.

    1.  It looks for a line containing "<prolog>".  This marks the start of a
        prolog, or descriptive block.  It parses the prolog until it finds
        "</prolog>".  The prolog consists of a number of clauses indicated by
        a some text followed by ":".  This is pretty formal - srcdoc was
        written to enforce a consistent style.  This is a complete prolog
        block:

        Name:       the name of the file (required)
        Title:      some title text (required)
        Package:    what package (optional)
        Written:    date and author (optional)
        Revised:    date and author (optional)
        Synopsis:   description of this header file (optional)
        Copyright:  some text
        Authors:    authors of package (optional)
        Notes:      descriptive notes (optional).  Put the notes on the line
                    following the Notes: keyword.  The notes are formatted
                    exactly as typed-in, using the HTML <PRE> tag.
        License:    ignored

    Any other clause is an error.  This is an example of a .h file prolog
    block:

    /*  --------------------------------------------------<Prolog>-
        Name:       myfunct.h
        Title:      These great functions
        Written:    91/05/20  Joe Bloggs <joe@bloggs.com>
        Revised:    96/04/10  Joe Bloggs <joe@bloggs.com>
        Synopsis:   These functions are great.  They are so great,
                    in fact, that words fail me.
    -----------------------------------------------------</Prolog>-*/

    2.  Srcdoc looks for function prototypes, #defines, and typedef's.  It
        builds a table for each these sets of definitions.

    3.  You can define several <prolog> blocks in a .h file; only the first
        one should have a Name: clause.  Each prolog block defines a section
        in the .h file, and generates a header.  Srcdoc outputs the function
        prototype, #define, and typedef tables in each section independently.

    4.  Srcdoc ignores functions whose name starts with '_'.

    This is how srcdoc parses a .c file:

    1.  It looks for a line containing "[<]".  This marks the start of a
        function header.  The function header marks a public function, and
        ends with a line containing "[>]".

    2.  The function header consists of a number of clauses indicated by a
        some text followed by ":".

        Function:   the name of the function (required)
        Synopsis:   description of function (optional)
        Examples:   examples of usage (optional).  Put the example text on
                    the line following the Examples: keyword.
        Notes:      descriptive notes (optional).  Put the notes on the line
                    following the Notes: keyword.  The notes are formatted
                    exactly as typed-in, using the HTML <PRE> tag.

    Any other clause is ignored.  This is an example of a function header:

    /*  -------------------------------------------------------------[<]-
        Function: count_sheep
        Synopsis: Takes any number, and counts sheep until sleep() is
                  TRUE.  The sheep argument must be positive and greater
                  than zero.
        Examples:
            count_sheep (100);   - moderate insomnia
            count_sheep (1000);  - advanced insomnia
        -------------------------------------------------------------[>]-*/

    3.  The function header Synopsis: clause can contain various tags that
        format specific blocks.  These are:

        <Table> </Table> - start and end a 2-column table; the first word
        comes in column 1; the remainder of the line in column 2.  Each
        entry on the table must be typed on exactly 1 line.  If you use '_'
        underscores in the first column, these are zapped into spaces.
        <List> </List> - start and end a bulleted list; the whole line is
        taken as a list item.  Do not try to bullet the line yourself.
        If a line starts with '\', this character is removed.

        For example:

        Synopsis: Takes any number, and counts sheep until sleep() is
                  TRUE.  These are some typical sheep values:
        <TABLE>
        1_to_9   Very tired.
        10       Quite tired.
        100      Moderate insomnia.
        1000     Advanced insomnia.
        </TABLE>
        \Note:
        <LIST>
        The sheep value must be a positive integer.
        The sheep value must be greater than zero.
        </LIST>

    4.  Srcdoc skips blank lines, and collects the function prototype.  This
        ends with a '{' in column 1.

    5.  Srcdoc collects the function body, which ends with a '}' in column 1.

    Whenever srcdoc needs to generate some output it refers to the formats
    defined in srcdoc.fmt.  This file describes the purpose of each format;
    you should examine this file if you want to know the specifics of the
    HTML generation done by srcdoc.

    Srcdoc does various replacements within the text that it processes.  This
    affects different types of text differently.  Within the Prolog block,
    srcdoc does these replacements:

    1.  "<name@domain.type>" becomes:
        "<A HREF="mailto:name@domain.type">name@domain.type</A>".
    2.  "<protocol://name>" becomes:
        "<A HREF="protocol://name">protocol://name</A>".
    3.  "<" becomes "&lt;".
    4.  ">" becomes "&gt;".
    5.  "<<Table>>..<</Table>>" becomes a table of entries.
    6.  "<<List>>..<</List>>" becomes a bulleted list.
    7.  "function (" when 'function' is a public function becomes:
        "<A HREF="filename#function">name</A> (".

    In a function header Synposis clause, srcdoc does these same
    replacements.  Within an Examples: clause, srcdoc only replaces < and >.
    In a function body, srcdoc zaps function references.

    Srcdoc uses htmlpp's anchor list (anchor.def) to create links to function
    names (point 7 above).  This means that you must run srcdoc and htmlpp
    several times to be really sure that every reference is correctly built.
    You should probably run srcdoc and htmlpp like this:

    srcdoc coversheet           -- first pass
    htmlpp html.out             -- build anchors
    srcdoc coversheet           -- second pass, uses anchors
    htmlpp html.out             -- build output, uses anchors

    Since htmlpp scans its input twice, this gets a bit slow.  So, buy a
    faster machine.  It is worthwhile.

POST-PROCESSING

    Srcdoc creates two further files: sources.lst and headers.lst.  These
    list the .c files and .h files, one per line.  You can use these as a
    project definition.  For instance, we sometimes build build scripts
    starting from these files.

SEE ALSO

    You should have htmlpp and be familiar with its usage.  Download htmlpp
    from: http://www.imatix.com/pub/tools/htmlpp.zip.  You can download
    srcdoc from: http://www.imatix.com/pub/tools/srcdoc.zip.

    If you want to change srcdoc, get a hold of the camel book (Programming
    Perl), and the Libero documentation.

INSTALLATION

    UNIX: install srcdoc, srcdoc.d, and srcdoc.fmt in some convenient
    directory that is accessible to everyone.  You should be familiar with
    the mechanics of the Perl -I switch: you may need to play with this to
    get Perl to find srcdoc.d correctly.  Make srcdoc executable and run it.
    You should get a message like this:

    srcdoc 1.41 - by Pieter Hintjens
    syntax: srcdoc <filename>

    MS-DOS: you need BPERL.EXE, and a machine that can run it.  Install
    srcdoc.bat, srcdoc, srcdoc.d, and srcdoc.fmt on some directory on
    your path, and add that directory to the PERLLIB definition.  You will
    probably want to change srcdoc.bat to refer to the correct directory.

    You can tune the generated output by modifying the srcdoc.fmt file,
    which is full of comments that may even be of some use.

BUGS

    None that I know of.

AUTHOR

    Pieter Hintjens <ph@imatix.com>.  Version 1.0 released 18 April, 1996.

COPYRIGHT

    Distributed according to the GNU General Public License.  Copyright
    (c) 1996 Pieter Hintjens.

PORTABILITY

    Uses Perl 4, should be portable to Perl 5.  Does not use any system-
    specific features, so will run on any box (it was developed on MS-DOS).
    Under MS-DOS I use Big Perl (bperl).
